/*
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package in.octosolutions.coreDataManagement.ms.ck.resource.coreData.api;

import in.octosolutions.coreDataManagement.ms.ck.resource.coreData.invoker.ApiCallback;
import in.octosolutions.coreDataManagement.ms.ck.resource.coreData.invoker.ApiClient;
import in.octosolutions.coreDataManagement.ms.ck.resource.coreData.invoker.ApiException;
import in.octosolutions.coreDataManagement.ms.ck.resource.coreData.invoker.ApiResponse;
import in.octosolutions.coreDataManagement.ms.ck.resource.coreData.invoker.Configuration;
import in.octosolutions.coreDataManagement.ms.ck.resource.coreData.invoker.Pair;
import in.octosolutions.coreDataManagement.ms.ck.resource.coreData.invoker.ProgressRequestBody;
import in.octosolutions.coreDataManagement.ms.ck.resource.coreData.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import in.octosolutions.coreDataManagement.ms.ck.resource.coreData.model.Department;
import in.octosolutions.coreDataManagement.ms.ck.resource.coreData.model.Error;
import in.octosolutions.coreDataManagement.ms.ck.resource.coreData.model.PatchElement;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DepartmentManagementApi {
    private ApiClient apiClient;

    public DepartmentManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DepartmentManagementApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteDepartment
     * @param filters - supported qualifiers [&#x3D;&#x3D;, &gt;&#x3D;, !&#x3D;, &lt;&#x3D;, &#x3D;@] - \&quot;;\&quot; will act as filter separator - \&quot;,\&quot; will act as value separator in a particular filter  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDepartmentCall(List<String> filters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/department";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filters != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filters", filters));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDepartmentValidateBeforeCall(List<String> filters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = deleteDepartmentCall(filters, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Department Deletion by filter
     * delete Department
     * @param filters - supported qualifiers [&#x3D;&#x3D;, &gt;&#x3D;, !&#x3D;, &lt;&#x3D;, &#x3D;@] - \&quot;;\&quot; will act as filter separator - \&quot;,\&quot; will act as value separator in a particular filter  (optional)
     * @return Department
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Department deleteDepartment(List<String> filters) throws ApiException {
        ApiResponse<Department> resp = deleteDepartmentWithHttpInfo(filters);
        return resp.getData();
    }

    /**
     * Department Deletion by filter
     * delete Department
     * @param filters - supported qualifiers [&#x3D;&#x3D;, &gt;&#x3D;, !&#x3D;, &lt;&#x3D;, &#x3D;@] - \&quot;;\&quot; will act as filter separator - \&quot;,\&quot; will act as value separator in a particular filter  (optional)
     * @return ApiResponse&lt;Department&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Department> deleteDepartmentWithHttpInfo(List<String> filters) throws ApiException {
        com.squareup.okhttp.Call call = deleteDepartmentValidateBeforeCall(filters, null, null);
        Type localVarReturnType = new TypeToken<Department>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Department Deletion by filter (asynchronously)
     * delete Department
     * @param filters - supported qualifiers [&#x3D;&#x3D;, &gt;&#x3D;, !&#x3D;, &lt;&#x3D;, &#x3D;@] - \&quot;;\&quot; will act as filter separator - \&quot;,\&quot; will act as value separator in a particular filter  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDepartmentAsync(List<String> filters, final ApiCallback<Department> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDepartmentValidateBeforeCall(filters, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Department>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDepartment
     * @param filters - supported qualifiers [&#x3D;&#x3D;, &gt;&#x3D;, !&#x3D;, &lt;&#x3D;, &#x3D;@] - \&quot;;\&quot; will act as filter separator - \&quot;,\&quot; will act as value separator in a particular filter  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDepartmentCall(List<String> filters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/department";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filters != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filters", filters));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDepartmentValidateBeforeCall(List<String> filters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getDepartmentCall(filters, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List of Departments available
     * Produces List of Departments available
     * @param filters - supported qualifiers [&#x3D;&#x3D;, &gt;&#x3D;, !&#x3D;, &lt;&#x3D;, &#x3D;@] - \&quot;;\&quot; will act as filter separator - \&quot;,\&quot; will act as value separator in a particular filter  (optional)
     * @return Department
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Department getDepartment(List<String> filters) throws ApiException {
        ApiResponse<Department> resp = getDepartmentWithHttpInfo(filters);
        return resp.getData();
    }

    /**
     * List of Departments available
     * Produces List of Departments available
     * @param filters - supported qualifiers [&#x3D;&#x3D;, &gt;&#x3D;, !&#x3D;, &lt;&#x3D;, &#x3D;@] - \&quot;;\&quot; will act as filter separator - \&quot;,\&quot; will act as value separator in a particular filter  (optional)
     * @return ApiResponse&lt;Department&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Department> getDepartmentWithHttpInfo(List<String> filters) throws ApiException {
        com.squareup.okhttp.Call call = getDepartmentValidateBeforeCall(filters, null, null);
        Type localVarReturnType = new TypeToken<Department>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List of Departments available (asynchronously)
     * Produces List of Departments available
     * @param filters - supported qualifiers [&#x3D;&#x3D;, &gt;&#x3D;, !&#x3D;, &lt;&#x3D;, &#x3D;@] - \&quot;;\&quot; will act as filter separator - \&quot;,\&quot; will act as value separator in a particular filter  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDepartmentAsync(List<String> filters, final ApiCallback<Department> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDepartmentValidateBeforeCall(filters, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Department>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for saveDepartment
     * @param departmentInput  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call saveDepartmentCall(Department departmentInput, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = departmentInput;

        // create path and map variables
        String localVarPath = "/department";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call saveDepartmentValidateBeforeCall(Department departmentInput, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'departmentInput' is set
        if (departmentInput == null) {
            throw new ApiException("Missing the required parameter 'departmentInput' when calling saveDepartment(Async)");
        }
        

        com.squareup.okhttp.Call call = saveDepartmentCall(departmentInput, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Insertion of Department
     * Creates New entry of a Department
     * @param departmentInput  (required)
     * @return Department
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Department saveDepartment(Department departmentInput) throws ApiException {
        ApiResponse<Department> resp = saveDepartmentWithHttpInfo(departmentInput);
        return resp.getData();
    }

    /**
     * Insertion of Department
     * Creates New entry of a Department
     * @param departmentInput  (required)
     * @return ApiResponse&lt;Department&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Department> saveDepartmentWithHttpInfo(Department departmentInput) throws ApiException {
        com.squareup.okhttp.Call call = saveDepartmentValidateBeforeCall(departmentInput, null, null);
        Type localVarReturnType = new TypeToken<Department>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insertion of Department (asynchronously)
     * Creates New entry of a Department
     * @param departmentInput  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call saveDepartmentAsync(Department departmentInput, final ApiCallback<Department> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = saveDepartmentValidateBeforeCall(departmentInput, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Department>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDepartment
     * @param patchElement \&quot;Department patch element\&quot;  (required)
     * @param filters - supported qualifiers [&#x3D;&#x3D;, &gt;&#x3D;, !&#x3D;, &lt;&#x3D;, &#x3D;@] - \&quot;;\&quot; will act as filter separator - \&quot;,\&quot; will act as value separator in a particular filter  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDepartmentCall(PatchElement patchElement, List<String> filters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = patchElement;

        // create path and map variables
        String localVarPath = "/department";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filters != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filters", filters));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDepartmentValidateBeforeCall(PatchElement patchElement, List<String> filters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'patchElement' is set
        if (patchElement == null) {
            throw new ApiException("Missing the required parameter 'patchElement' when calling updateDepartment(Async)");
        }
        

        com.squareup.okhttp.Call call = updateDepartmentCall(patchElement, filters, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Department Updation by filter
     * Produces List of Departments
     * @param patchElement \&quot;Department patch element\&quot;  (required)
     * @param filters - supported qualifiers [&#x3D;&#x3D;, &gt;&#x3D;, !&#x3D;, &lt;&#x3D;, &#x3D;@] - \&quot;;\&quot; will act as filter separator - \&quot;,\&quot; will act as value separator in a particular filter  (optional)
     * @return Department
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Department updateDepartment(PatchElement patchElement, List<String> filters) throws ApiException {
        ApiResponse<Department> resp = updateDepartmentWithHttpInfo(patchElement, filters);
        return resp.getData();
    }

    /**
     * Department Updation by filter
     * Produces List of Departments
     * @param patchElement \&quot;Department patch element\&quot;  (required)
     * @param filters - supported qualifiers [&#x3D;&#x3D;, &gt;&#x3D;, !&#x3D;, &lt;&#x3D;, &#x3D;@] - \&quot;;\&quot; will act as filter separator - \&quot;,\&quot; will act as value separator in a particular filter  (optional)
     * @return ApiResponse&lt;Department&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Department> updateDepartmentWithHttpInfo(PatchElement patchElement, List<String> filters) throws ApiException {
        com.squareup.okhttp.Call call = updateDepartmentValidateBeforeCall(patchElement, filters, null, null);
        Type localVarReturnType = new TypeToken<Department>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Department Updation by filter (asynchronously)
     * Produces List of Departments
     * @param patchElement \&quot;Department patch element\&quot;  (required)
     * @param filters - supported qualifiers [&#x3D;&#x3D;, &gt;&#x3D;, !&#x3D;, &lt;&#x3D;, &#x3D;@] - \&quot;;\&quot; will act as filter separator - \&quot;,\&quot; will act as value separator in a particular filter  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDepartmentAsync(PatchElement patchElement, List<String> filters, final ApiCallback<Department> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDepartmentValidateBeforeCall(patchElement, filters, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Department>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
