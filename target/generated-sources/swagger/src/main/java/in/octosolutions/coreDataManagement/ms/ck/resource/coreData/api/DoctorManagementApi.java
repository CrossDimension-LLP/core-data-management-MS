/*
 * 
 * 
 *
 * 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package in.octosolutions.coreDataManagement.ms.ck.resource.coreData.api;

import in.octosolutions.coreDataManagement.ms.ck.resource.coreData.invoker.ApiCallback;
import in.octosolutions.coreDataManagement.ms.ck.resource.coreData.invoker.ApiClient;
import in.octosolutions.coreDataManagement.ms.ck.resource.coreData.invoker.ApiException;
import in.octosolutions.coreDataManagement.ms.ck.resource.coreData.invoker.ApiResponse;
import in.octosolutions.coreDataManagement.ms.ck.resource.coreData.invoker.Configuration;
import in.octosolutions.coreDataManagement.ms.ck.resource.coreData.invoker.Pair;
import in.octosolutions.coreDataManagement.ms.ck.resource.coreData.invoker.ProgressRequestBody;
import in.octosolutions.coreDataManagement.ms.ck.resource.coreData.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import in.octosolutions.coreDataManagement.ms.ck.resource.coreData.model.Doctor;
import in.octosolutions.coreDataManagement.ms.ck.resource.coreData.model.Error;
import in.octosolutions.coreDataManagement.ms.ck.resource.coreData.model.PatchElement;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DoctorManagementApi {
    private ApiClient apiClient;

    public DoctorManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DoctorManagementApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteDoctors
     * @param filters - supported qualifiers [&#x3D;&#x3D;, &gt;&#x3D;, !&#x3D;, &lt;&#x3D;, &#x3D;@] - \&quot;;\&quot; will act as filter separator - \&quot;,\&quot; will act as value separator in a particular filter  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteDoctorsCall(List<String> filters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/doctor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filters != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filters", filters));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteDoctorsValidateBeforeCall(List<String> filters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = deleteDoctorsCall(filters, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Doctor Deletion by filter
     * delete Doctor
     * @param filters - supported qualifiers [&#x3D;&#x3D;, &gt;&#x3D;, !&#x3D;, &lt;&#x3D;, &#x3D;@] - \&quot;;\&quot; will act as filter separator - \&quot;,\&quot; will act as value separator in a particular filter  (optional)
     * @return Doctor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Doctor deleteDoctors(List<String> filters) throws ApiException {
        ApiResponse<Doctor> resp = deleteDoctorsWithHttpInfo(filters);
        return resp.getData();
    }

    /**
     * Doctor Deletion by filter
     * delete Doctor
     * @param filters - supported qualifiers [&#x3D;&#x3D;, &gt;&#x3D;, !&#x3D;, &lt;&#x3D;, &#x3D;@] - \&quot;;\&quot; will act as filter separator - \&quot;,\&quot; will act as value separator in a particular filter  (optional)
     * @return ApiResponse&lt;Doctor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Doctor> deleteDoctorsWithHttpInfo(List<String> filters) throws ApiException {
        com.squareup.okhttp.Call call = deleteDoctorsValidateBeforeCall(filters, null, null);
        Type localVarReturnType = new TypeToken<Doctor>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Doctor Deletion by filter (asynchronously)
     * delete Doctor
     * @param filters - supported qualifiers [&#x3D;&#x3D;, &gt;&#x3D;, !&#x3D;, &lt;&#x3D;, &#x3D;@] - \&quot;;\&quot; will act as filter separator - \&quot;,\&quot; will act as value separator in a particular filter  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDoctorsAsync(List<String> filters, final ApiCallback<Doctor> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDoctorsValidateBeforeCall(filters, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Doctor>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDoctors
     * @param filters - supported qualifiers [&#x3D;&#x3D;, &gt;&#x3D;, !&#x3D;, &lt;&#x3D;, &#x3D;@] - \&quot;;\&quot; will act as filter separator - \&quot;,\&quot; will act as value separator in a particular filter  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDoctorsCall(List<String> filters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/doctor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filters != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filters", filters));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDoctorsValidateBeforeCall(List<String> filters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getDoctorsCall(filters, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List of Doctors available
     * Produces List of Doctors available
     * @param filters - supported qualifiers [&#x3D;&#x3D;, &gt;&#x3D;, !&#x3D;, &lt;&#x3D;, &#x3D;@] - \&quot;;\&quot; will act as filter separator - \&quot;,\&quot; will act as value separator in a particular filter  (optional)
     * @return Doctor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Doctor getDoctors(List<String> filters) throws ApiException {
        ApiResponse<Doctor> resp = getDoctorsWithHttpInfo(filters);
        return resp.getData();
    }

    /**
     * List of Doctors available
     * Produces List of Doctors available
     * @param filters - supported qualifiers [&#x3D;&#x3D;, &gt;&#x3D;, !&#x3D;, &lt;&#x3D;, &#x3D;@] - \&quot;;\&quot; will act as filter separator - \&quot;,\&quot; will act as value separator in a particular filter  (optional)
     * @return ApiResponse&lt;Doctor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Doctor> getDoctorsWithHttpInfo(List<String> filters) throws ApiException {
        com.squareup.okhttp.Call call = getDoctorsValidateBeforeCall(filters, null, null);
        Type localVarReturnType = new TypeToken<Doctor>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List of Doctors available (asynchronously)
     * Produces List of Doctors available
     * @param filters - supported qualifiers [&#x3D;&#x3D;, &gt;&#x3D;, !&#x3D;, &lt;&#x3D;, &#x3D;@] - \&quot;;\&quot; will act as filter separator - \&quot;,\&quot; will act as value separator in a particular filter  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDoctorsAsync(List<String> filters, final ApiCallback<Doctor> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDoctorsValidateBeforeCall(filters, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Doctor>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for saveDoctor
     * @param doctorInput  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call saveDoctorCall(Doctor doctorInput, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = doctorInput;

        // create path and map variables
        String localVarPath = "/doctor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call saveDoctorValidateBeforeCall(Doctor doctorInput, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'doctorInput' is set
        if (doctorInput == null) {
            throw new ApiException("Missing the required parameter 'doctorInput' when calling saveDoctor(Async)");
        }
        

        com.squareup.okhttp.Call call = saveDoctorCall(doctorInput, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Insertion of doctor
     * Creates New entry of a doctor
     * @param doctorInput  (required)
     * @return Doctor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Doctor saveDoctor(Doctor doctorInput) throws ApiException {
        ApiResponse<Doctor> resp = saveDoctorWithHttpInfo(doctorInput);
        return resp.getData();
    }

    /**
     * Insertion of doctor
     * Creates New entry of a doctor
     * @param doctorInput  (required)
     * @return ApiResponse&lt;Doctor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Doctor> saveDoctorWithHttpInfo(Doctor doctorInput) throws ApiException {
        com.squareup.okhttp.Call call = saveDoctorValidateBeforeCall(doctorInput, null, null);
        Type localVarReturnType = new TypeToken<Doctor>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Insertion of doctor (asynchronously)
     * Creates New entry of a doctor
     * @param doctorInput  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call saveDoctorAsync(Doctor doctorInput, final ApiCallback<Doctor> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = saveDoctorValidateBeforeCall(doctorInput, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Doctor>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateDoctor
     * @param patchElement \&quot;Doctor patch element\&quot;  (required)
     * @param filters - supported qualifiers [&#x3D;&#x3D;, &gt;&#x3D;, !&#x3D;, &lt;&#x3D;, &#x3D;@] - \&quot;;\&quot; will act as filter separator - \&quot;,\&quot; will act as value separator in a particular filter  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateDoctorCall(PatchElement patchElement, List<String> filters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = patchElement;

        // create path and map variables
        String localVarPath = "/doctor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filters != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filters", filters));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateDoctorValidateBeforeCall(PatchElement patchElement, List<String> filters, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'patchElement' is set
        if (patchElement == null) {
            throw new ApiException("Missing the required parameter 'patchElement' when calling updateDoctor(Async)");
        }
        

        com.squareup.okhttp.Call call = updateDoctorCall(patchElement, filters, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Doctor Updation by filter
     * Produces List of Doctors
     * @param patchElement \&quot;Doctor patch element\&quot;  (required)
     * @param filters - supported qualifiers [&#x3D;&#x3D;, &gt;&#x3D;, !&#x3D;, &lt;&#x3D;, &#x3D;@] - \&quot;;\&quot; will act as filter separator - \&quot;,\&quot; will act as value separator in a particular filter  (optional)
     * @return Doctor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Doctor updateDoctor(PatchElement patchElement, List<String> filters) throws ApiException {
        ApiResponse<Doctor> resp = updateDoctorWithHttpInfo(patchElement, filters);
        return resp.getData();
    }

    /**
     * Doctor Updation by filter
     * Produces List of Doctors
     * @param patchElement \&quot;Doctor patch element\&quot;  (required)
     * @param filters - supported qualifiers [&#x3D;&#x3D;, &gt;&#x3D;, !&#x3D;, &lt;&#x3D;, &#x3D;@] - \&quot;;\&quot; will act as filter separator - \&quot;,\&quot; will act as value separator in a particular filter  (optional)
     * @return ApiResponse&lt;Doctor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Doctor> updateDoctorWithHttpInfo(PatchElement patchElement, List<String> filters) throws ApiException {
        com.squareup.okhttp.Call call = updateDoctorValidateBeforeCall(patchElement, filters, null, null);
        Type localVarReturnType = new TypeToken<Doctor>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Doctor Updation by filter (asynchronously)
     * Produces List of Doctors
     * @param patchElement \&quot;Doctor patch element\&quot;  (required)
     * @param filters - supported qualifiers [&#x3D;&#x3D;, &gt;&#x3D;, !&#x3D;, &lt;&#x3D;, &#x3D;@] - \&quot;;\&quot; will act as filter separator - \&quot;,\&quot; will act as value separator in a particular filter  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDoctorAsync(PatchElement patchElement, List<String> filters, final ApiCallback<Doctor> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDoctorValidateBeforeCall(patchElement, filters, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Doctor>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
